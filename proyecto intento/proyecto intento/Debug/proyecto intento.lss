
AVRASM ver. 2.2.8  C:\Users\josea\OneDrive\Escritorio\PDM\proyecto intento\proyecto intento\main.asm Thu Mar 14 15:16:45 2024

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Users\josea\OneDrive\Escritorio\PDM\proyecto intento\proyecto intento\main.asm(10): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\M328PDEF.INC'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Users\josea\OneDrive\Escritorio\PDM\proyecto intento\proyecto intento\main.asm(10): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\M328PDEF.INC'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; proyecto intento.asm
                                 ;
                                 ; Created: 14/03/2024 00:26:24
                                 ; Author : josea
                                 ;
                                 
                                 
                                 ; Replace with your application code
                                 .INCLUDE "M328PDEF.INC"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .EQU T1VALUE = 0XE17B
                                 .DEF STATE = R18		;R16 AND R17 VAR
                                 .DEF COUNTER_T0 = R20
                                 .DEF COUNTER = R19
                                 .CSEG
                                 .ORG 0X00
000000 940c 0022                 	JMP SETUP		;RESET VECTOR
                                 .ORG 0X0006
000006 940c 0319                 	JMP ISR_PCINT0	;VECTOR: PC_INT0
                                 .ORG 0X0020
000020 940c 045d                 	JMP ISR_TIMER0	;ISR: TIMER0 VECTOR
                                 
                                 
                                 SETUP:
000022 e008                      	LDI R16, HIGH(RAMEND)
000023 bf0e                      	OUT SPH, R16
000024 ef1f                      	LDI R17, LOW(RAMEND)
000025 bf1d                      	OUT SPL, R17
                                 
                                 	;LIST OF VALUES FOR DISPLAY, NUMBERS
000026 063f
000027 4f5b
000028 6d66
000029 077d
00002a 6f7f                      	SEG: .DB 0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F
                                 
                                 	;PINS CONFIG
00002b e000                      	LDI R16, 0X00
00002c 9300 00c1                 	STS UCSR0B, R16		;RX AN TX AS NORMAL PINS
                                 	
00002e ef0f                      	LDI R16, 0XFF		;ENTIRE PORTD AS OUTPUT
00002f b90a                      	OUT DDRD, R16
000030 985f                      	CBI PORTD, PD7
                                 
000031 e30f                      	LDI R16, 0X3F		;ENTIRE PORTC AS OUTPUT
000032 b907                      	OUT DDRC, R16
                                 
000033 e00f                      	LDI R16, 0X0F		;PB0-PB3 AS INPUT W PULL-UP
000034 b905                      	OUT PORTB, R16
000035 e300                      	LDI R16, 0X30		;PB5 AND PB4 AS OUTPUT, PB0-PB3 AS INPUT
000036 b904                      	OUT DDRB, R16
                                 
                                 	;IT TAKES EVERY VALUE FROM THE LIST OF VALUES FOR DISPLAY
000037 e050                      	LDI R21, 0
000038 e0f0                      	LDI ZH, HIGH(SEG << 1)
000039 e4ec                      	LDI ZL, LOW(SEG << 1)
00003a 0fe5                      	ADD ZL, R21
00003b 9154                      	LPM R21, Z
                                 	
                                 	;CLEAR PORTC AND PORTD BEFORE RUNNING THE ENTIRE PROGRAM
00003c 2700                      	CLR R16
00003d b908                      	OUT PORTC, R16
                                 
00003e e00f                      	LDI R16, (1 << PCINT1) | (1 << PCINT0) | (1 << PCINT2) | (1 << PCINT3)
00003f 9300 006b                 	STS PCMSK0, R16		;ISR PCINT FOR PB0 AND PB1
                                 
000041 e001                      	LDI R16, (1 << PCIE0)
000042 9300 0068                 	STS PCICR, R16		;PIN CHANGE FOR PORTB
                                 	
000044 940e 0455                 	CALL INIT_T0		;SET TIMER0
                                 
000046 9478                      	SEI					;ENABLE GLOBAL INTERRUPTS
                                 
000047 2722                      	CLR STATE
000048 2744                      	CLR COUNTER_T0
000049 2733                      	CLR COUNTER
                                 	;IF I WANT TO SET A VALUE FOR THE RTC, SET DISPLAY BY DISPLAY
00004a e000                      	LDI R16, 0
00004b 9300 0121                 	STS 0X0121, R16		;DISPLAY1 SECONDS
00004d e005                      	LDI R16, 5
00004e 9300 0122                 	STS 0X0122, R16		;DISPLAY2 SECONDS
000050 e009                      	LDI R16, 9
000051 9300 0123                 	STS 0X0123, R16		;DISPLAY1 MIN
000053 e005                      	LDI R16, 5
000054 9300 0124                 	STS 0X0124, R16		;DISPLAY2 MIN
000056 e003                      	LDI R16, 3
000057 9300 0125                 	STS 0X0125, R16		;DISPLAY1 HOURS
000059 e002                      	LDI R16, 2
00005a 9300 0126                 	STS 0X0126, R16		;DISPLAY2 HOURS
00005c 2700                      	CLR R16
00005d 9300 0127                 	STS 0X0127, R16		;STATE DISPLAY
                                 
                                 	;MANUAL SET FOR RTC
00005f 9300 0131                 	STS 0X0131, R16		;STATE DISPLAY1 MIN
000061 9300 0132                 	STS 0X0132, R16		;STATE DISPLAY2 MIN
000063 9300 0133                 	STS 0X0133, R16		;STATE DISPLAY3 HOUR
000065 9300 0134                 	STS 0X0134, R16		;STATE DISPLAY4 HOUR
                                 
                                 	;ALARMA
000067 9300 0141                 	STS 0X0141, R16		;STATE DISPLAY1 MIN
000069 9300 0142                 	STS 0X0142, R16		;STATE DISPLAY2 MIN
00006b 9300 0143                 	STS 0X0143, R16		;STATE DISPLAY3 HOUR
00006d 9300 0144                 	STS 0X0144, R16		;STATE DISPLAY4 HOUR
                                 
                                 ;LOOP IS USED JUST FOR KNOWING IN WICH STATE WE R
                                 LOOP:
00006f 3020                      	CPI STATE, 0
000070 f0b1                          BREQ STATE0P
000071 3021                          CPI STATE, 1
000072 f0b1                          BREQ STATE1P
000073 3022                      	CPI STATE, 2
000074 f0e9                      	BREQ STATE2P
000075 3023                      	CPI STATE, 3
000076 f111                      	BREQ STATE3P
000077 3024                      	CPI STATE, 4
000078 f129                      	BREQ STATE4P
000079 3025                      	CPI STATE, 5
00007a f129                      	BREQ STATE5P
00007b 3026                      	CPI STATE, 6
00007c f129                      	BREQ STATE6P
00007d 3027                      	CPI STATE, 7
00007e f161                      	BREQ STATE7P
00007f 3028                      	CPI STATE, 8
000080 f189                      	BREQ STATE8P
000081 3029                      	CPI STATE, 9
000082 f1a1                      	BREQ STATE9P
000083 302a                      	CPI STATE, 10
000084 f1a1                      	BREQ STATE10P
000085 302b                      	CPI STATE, 11
000086 f191                      	BREQ STATE10P
                                 
                                 ;PASSSING STATES
                                 STATE0P:
000087 940c 00bd                 	JMP STATE0
                                 STATE1P:
000089 2700                      	CLR R16
00008a 9300 0132                 	STS 0X0132, R16		;STATE DISPLAY2 MIN
00008c 9300 0133                 	STS 0X0133, R16		;STATE DISPLAY3 HOUR
00008e 9300 0134                 	STS 0X0134, R16		;STATE DISPLAY4 HOUR
000090 940c 00fd                 	JMP STATE1
                                 STATE2P:
000092 2700                      	CLR R16
000093 9300 0133                 	STS 0X0133, R16		;STATE DISPLAY3 HOUR
000095 9300 0134                 	STS 0X0134, R16		;STATE DISPLAY4 HOUR
000097 940c 0111                 	JMP STATE2
                                 STATE3P:
000099 2700                      	CLR R16
00009a 9300 0134                 	STS 0X0134, R16		;STATE DISPLAY4 HOUR
00009c 940c 0125                 	JMP STATE3
                                 STATE4P:
00009e 940c 0139                 	JMP STATE4
                                 STATE5P:
0000a0 940c 014d                 	JMP STATE5
                                 STATE6P:
0000a2 2700                      	CLR R16
0000a3 9300 0142                 	STS 0X0142, R16		;STATE DISPLAY2 MIN
0000a5 9300 0143                 	STS 0X0143, R16		;STATE DISPLAY3 HOUR
0000a7 9300 0144                 	STS 0X0144, R16		;STATE DISPLAY4 HOUR
0000a9 940c 0193                 	JMP STATE6
                                 STATE7P:
0000ab 2700                      	CLR R16
0000ac 9300 0143                 	STS 0X0143, R16		;STATE DISPLAY3 HOUR
0000ae 9300 0144                 	STS 0X0144, R16		;STATE DISPLAY4 HOUR
0000b0 940c 01a7                 	JMP STATE7
                                 STATE8P:
0000b2 2700                      	CLR R16
0000b3 9300 0144                 	STS 0X0144, R16		;STATE DISPLAY4 HOUR
0000b5 940c 01bb                 	JMP STATE8
                                 STATE9P:
0000b7 940c 01cf                 	JMP STATE9
                                 STATE10P:
0000b9 940c 01e3                 	JMP STATE10
                                 STATE11P:
0000bb 940c 0219                 	JMP STATE11
                                 
                                 
                                 ;******************************************************************************
                                 ;                                    STATE0	
                                 ;******************************************************************************
                                 STATE0:					;SHOW CLOCK
0000bd 2766                      	CLR R22
                                 
                                 	;DISPLAY1 MINUTES
0000be 940e 02e6                 	CALL CLEAN
0000c0 9160 0123                 	LDS R22, 0X0123
0000c2 940e 02eb                 	CALL DISPLAY
0000c4 e001                      	LDI R16, 0X01		;MUX
0000c5 b908                      	OUT PORTC, R16		;ONLY TRANSISTOR 3
0000c6 b96b                      	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 
                                 	;DISPLAY2 MINUTES
0000c7 940e 02e6                 	CALL CLEAN
0000c9 9160 0124                 	LDS R22, 0X0124
0000cb 940e 02eb                 	CALL DISPLAY
0000cd e002                      	LDI R16, 0X02		;MUX
0000ce b908                      	OUT PORTC, R16		;ONLY TRANSISTOR 4
0000cf b96b                      	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 
                                 	;DISPLAY1 HOUR
0000d0 940e 02e6                 	CALL CLEAN
0000d2 9160 0125                 	LDS R22, 0X0125
0000d4 940e 02eb                 	CALL DISPLAY
0000d6 e004                      	LDI R16, 0X04		;MUX
0000d7 b908                      	OUT PORTC, R16		;ONLY TRANSISTOR 5
0000d8 b96b                      	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 
                                 	;DISPLAY2 HOUR
0000d9 940e 02e6                 	CALL CLEAN
0000db 9160 0126                 	LDS R22, 0X0126
0000dd 940e 02eb                 	CALL DISPLAY
0000df 982d                      	CBI PORTB, PB5		;CLR PB5
0000e0 e008                      	LDI R16, 0X08		;MUX
0000e1 b908                      	OUT PORTC, R16		;ONLY TRANSISTOR 6
0000e2 b96b                      	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 	
                                 	;IT WAITS ONE SEC
0000e3 3342                      	CPI COUNTER_T0, 50
0000e4 f089                      	BREQ D7
0000e5 3643                      	CPI COUNTER_T0, 99
0000e6 f079                      	BREQ D7
0000e7 3644                      	CPI COUNTER_T0, 100			; 100 * 10ms = 1000ms
0000e8 f499                      	BRNE LOOPS0
0000e9 2744                      	CLR COUNTER_T0				;IT CLEARS COUNTER_T0
0000ea 9a4f                      	SBI PIND, PD7
                                 	;IT UPLOADS VALUE OF SECONDS
0000eb 2766                      	CLR R22
0000ec 9160 0121                 	LDS R22, 0X0121		;LOAD TO R22 THE CONTENT FROM 0X0121, D1 SEC'S COUNTER
0000ee 9563                      	INC R22				;COUNTER FOR SECONDS
0000ef 9360 0121                 	STS 0X0121, R22		;RELOAD COUNT TO 0X0121
0000f1 306a                      	CPI R22, 10			;COMPARE CONTENT OF 0X0121 TO 10 (10 SECS)
0000f2 f039                      	BREQ ZEROSP			;IF IT'S BEEN 10 SECS GOES TO RESTART
0000f3 2766                      	CLR R22
0000f4 940c 006f                 	JMP LOOP
                                 D7:
0000f6 9a4f                      	SBI PIND, PD7
0000f7 9a2c                      	SBI PORTB, PB4
0000f8 9845                      	CBI PORTC, PC5
0000f9 cf75                      	RJMP LOOP
                                 ZEROSP:
0000fa 940c 027d                 	JMP ZEROS
                                 LOOPS0:
0000fc cf72                      	RJMP LOOP
                                 
                                 
                                 ;******************************************************************************
                                 ;                                    STATE1	
                                 ;******************************************************************************
                                 
                                 ;HERE, JUST SET A VALUE FOR DISPLAY1 MIN
                                 STATE1:
0000fd 940e 02bf                 	CALL MUX_DISPLAYS
                                 	;IT WAITS ONE SEC
0000ff 3644                      	CPI COUNTER_T0, 100			; 100 * 10ms = 1000ms
000100 f461                      	BRNE LOOPS1
000101 2744                      	CLR COUNTER_T0				;IT CLEARS COUNTER_T0
                                 
                                 	;IT UPLOADS VALUE OF SECONDS
000102 2766                      	CLR R22
000103 9160 0121                 	LDS R22, 0X0121		;LOAD TO R22 THE CONTENT FROM 0X0121, D1 SEC'S COUNTER
000105 9563                      	INC R22				;COUNTER FOR SECONDS
000106 9360 0121                 	STS 0X0121, R22		;RELOAD COUNT TO 0X0121
000108 306a                      	CPI R22, 10			;COMPARE CONTENT OF 0X0121 TO 10 (10 SECS)
000109 f029                      	BREQ ZEROSP1			;IF IT'S BEEN 10 SECS GOES TO RESTART
00010a 2766                      	CLR R22
00010b 940c 006f                 	JMP LOOP
                                 
                                 LOOPS1:
00010d 940c 006f                 	JMP LOOP
                                 ZEROSP1:
00010f 940c 027d                 	JMP ZEROS
                                 
                                 
                                 ;******************************************************************************
                                 ;                                    STATE2	
                                 ;******************************************************************************
                                 
                                 ;HERE, JUST SET A VALUE FOR DISPLAY2 MIN
                                 STATE2:
000111 940e 02bf                 	CALL MUX_DISPLAYS
                                 	;IT WAITS ONE SEC
000113 3644                      	CPI COUNTER_T0, 100			; 100 * 10ms = 1000ms
000114 f461                      	BRNE LOOPS2
000115 2744                      	CLR COUNTER_T0				;IT CLEARS COUNTER_T0
                                 
                                 	;IT UPLOADS VALUE OF SECONDS
000116 2766                      	CLR R22
000117 9160 0121                 	LDS R22, 0X0121		;LOAD TO R22 THE CONTENT FROM 0X0121, D1 SEC'S COUNTER
000119 9563                      	INC R22				;COUNTER FOR SECONDS
00011a 9360 0121                 	STS 0X0121, R22		;RELOAD COUNT TO 0X0121
00011c 306a                      	CPI R22, 10			;COMPARE CONTENT OF 0X0121 TO 10 (10 SECS)
00011d f029                      	BREQ ZEROSP2			;IF IT'S BEEN 10 SECS GOES TO RESTART
00011e 2766                      	CLR R22
00011f 940c 006f                 	JMP LOOP
                                 
                                 LOOPS2:
000121 940c 006f                 	JMP LOOP
                                 ZEROSP2:
000123 940c 027d                 	JMP ZEROS
                                 
                                 
                                 
                                 ;******************************************************************************
                                 ;                                    STATE3	
                                 ;******************************************************************************
                                 STATE3:
000125 940e 02bf                 	CALL MUX_DISPLAYS
                                 	;IT WAITS ONE SEC
000127 3644                      	CPI COUNTER_T0, 100			; 100 * 10ms = 1000ms
000128 f461                      	BRNE LOOPS3
000129 2744                      	CLR COUNTER_T0				;IT CLEARS COUNTER_T0
                                 	;IT UPLOADS VALUE OF SECONDS
00012a 2766                      	CLR R22
00012b 9160 0121                 	LDS R22, 0X0121		;LOAD TO R22 THE CONTENT FROM 0X0121, D1 SEC'S COUNTER
00012d 9563                      	INC R22				;COUNTER FOR SECONDS
00012e 9360 0121                 	STS 0X0121, R22		;RELOAD COUNT TO 0X0121
000130 306a                      	CPI R22, 10			;COMPARE CONTENT OF 0X0121 TO 10 (10 SECS)
000131 f029                      	BREQ ZEROSP3			;IF IT'S BEEN 10 SECS GOES TO RESTART
000132 2766                      	CLR R22
000133 940c 006f                 	JMP LOOP
                                 
                                 LOOPS3:
000135 940c 006f                 	JMP LOOP
                                 ZEROSP3:
000137 940c 027d                 	JMP ZEROS
                                 
                                 
                                 
                                 ;******************************************************************************
                                 ;                                    STATE4	
                                 ;******************************************************************************
                                 STATE4:
000139 940e 02bf                 	CALL MUX_DISPLAYS
                                 	;IT WAITS ONE SEC
00013b 3644                      	CPI COUNTER_T0, 100			; 100 * 10ms = 1000ms
00013c f461                      	BRNE LOOPS4
00013d 2744                      	CLR COUNTER_T0				;IT CLEARS COUNTER_T0
                                 	;IT UPLOADS VALUE OF SECONDS
00013e 2766                      	CLR R22
00013f 9160 0121                 	LDS R22, 0X0121		;LOAD TO R22 THE CONTENT FROM 0X0121, D1 SEC'S COUNTER
000141 9563                      	INC R22				;COUNTER FOR SECONDS
000142 9360 0121                 	STS 0X0121, R22		;RELOAD COUNT TO 0X0121
000144 306a                      	CPI R22, 10			;COMPARE CONTENT OF 0X0121 TO 10 (10 SECS)
000145 f029                      	BREQ ZEROSP4		;IF IT'S BEEN 10 SECS GOES TO RESTART
000146 2766                      	CLR R22
000147 940c 006f                 	JMP LOOP
                                 
                                 LOOPS4:
000149 940c 006f                 	JMP LOOP
                                 ZEROSP4:
00014b 940c 027d                 	JMP ZEROS
                                 
                                 ;******************************************************************************
                                 ;                                    STATE5	
                                 ;******************************************************************************
                                 STATE5:
00014d e026                      	LDI STATE, 6		;ASSIGN NEXT STATE
00014e 9160 0131                 	LDS R22, 0X0131
000150 9100 0132                 	LDS R16, 0X0132
000152 2b60                      	OR R22, R16
000153 9100 0133                 	LDS R16, 0X0133
000155 2b60                      	OR R22, R16
000156 9100 0134                 	LDS R16, 0X0134
000158 2b60                      	OR R22, R16
000159 3060                      	CPI R22, 0
00015a f1a1                      	BREQ LOOPS5
                                 	
00015b 9160 0133                 	LDS R22, 0X0133		;VALUE OF HOUR UNITS
00015d 3064                      	CPI R22, 4
00015e f410                      	BRSH RESET_CH		;IT CHECKS IF VALUE OF 0X0133 IS EQUAL OR MORE THAN 4
00015f 940e 016e                 	CALL ASSIGN_TIME
                                 
                                 RESET_CH:
000161 9160 0134                 	LDS R22, 0X0134		;CHECK IF HOUR DOZ IS 2
000163 3062                      	CPI R22, 2
000164 f011                      	BREQ RST_T			; IF IT'S 2, IT GOES TO RST HOUR
000165 940e 016e                 	CALL ASSIGN_TIME
                                 RST_T:
000167 2766                      	CLR R22
000168 9360 0133                 	STS 0X0133, R22		;ASSIGN VALUE 0 FOR UNITS AN DOZ OF HOUR
00016a 9360 0134                 	STS 0X0134, R22
00016c 940e 016e                 	CALL ASSIGN_TIME
                                 ASSIGN_TIME:
00016e 9160 0131                 	LDS R22, 0X0131		;UPLOAD VALUE FOR MIN UNITS
000170 9360 0123                 	STS 0X0123, R22
000172 9160 0132                 	LDS R22, 0X0132		;UPLOAD VALUE FOR MIN DOZ
000174 9360 0124                 	STS 0X0124, R22
000176 9160 0133                 	LDS R22, 0X0133		;UPLOAD VALUE FOR HOUR UNITS
000178 9360 0125                 	STS 0X0125, R22
00017a 9160 0134                 	LDS R22, 0X0134		;UPLOAD VALUE FOR HOUR DOZ
00017c 9360 0126                 	STS 0X0126, R22
00017e 2766                      	CLR R22
00017f 940e 02bf                 	CALL MUX_DISPLAYS
                                 	;IT WAITS ONE SEC
000181 3644                      	CPI COUNTER_T0, 100			; 100 * 10ms = 1000ms
000182 f461                      	BRNE LOOPS5
000183 2744                      	CLR COUNTER_T0				;IT CLEARS COUNTER_T0
                                 	;IT UPLOADS VALUE OF SECONDS
000184 2766                      	CLR R22
000185 9160 0121                 	LDS R22, 0X0121		;LOAD TO R22 THE CONTENT FROM 0X0121, D1 SEC'S COUNTER
000187 9563                      	INC R22				;COUNTER FOR SECONDS
000188 9360 0121                 	STS 0X0121, R22		;RELOAD COUNT TO 0X0121
00018a 306a                      	CPI R22, 10			;COMPARE CONTENT OF 0X0121 TO 10 (10 SECS)
00018b f029                      	BREQ ZEROSP5		;IF IT'S BEEN 10 SECS GOES TO RESTART
00018c 2766                      	CLR R22
00018d 940c 006f                 	JMP LOOP
                                 LOOPS5:
00018f 940c 006f                 	JMP LOOP
                                 ZEROSP5:
000191 940c 027d                 	JMP ZEROS
                                 
                                 
                                 
                                 
                                 
                                 
                                 ;SATETE 6 *************************************************************
                                 
                                 
                                 
                                 ;HERE, JUST SET A VALUE FOR DISPLAY1 MIN
                                 STATE6:
000193 940e 02f0                 	CALL MUX_DISPLAYS_ARM
                                 	;IT WAITS ONE SEC
000195 3644                      	CPI COUNTER_T0, 100			; 100 * 10ms = 1000ms
000196 f461                      	BRNE LOOPS6
000197 2744                      	CLR COUNTER_T0				;IT CLEARS COUNTER_T0
                                 
                                 	;IT UPLOADS VALUE OF SECONDS
000198 2766                      	CLR R22
000199 9160 0121                 	LDS R22, 0X0121		;LOAD TO R22 THE CONTENT FROM 0X0121, D1 SEC'S COUNTER
00019b 9563                      	INC R22				;COUNTER FOR SECONDS
00019c 9360 0121                 	STS 0X0121, R22		;RELOAD COUNT TO 0X0121
00019e 306a                      	CPI R22, 10			;COMPARE CONTENT OF 0X0121 TO 10 (10 SECS)
00019f f029                      	BREQ ZEROSP6			;IF IT'S BEEN 10 SECS GOES TO RESTART
0001a0 2766                      	CLR R22
0001a1 940c 006f                 	JMP LOOP
                                 
                                 LOOPS6:
0001a3 940c 006f                 	JMP LOOP
                                 ZEROSP6:
0001a5 940c 027d                 	JMP ZEROS
                                 
                                 
                                 ;******************************************************************************
                                 ;                                    STATE7
                                 ;******************************************************************************
                                 
                                 ;HERE, JUST SET A VALUE FOR DISPLAY2 MIN
                                 STATE7:
0001a7 940e 02f0                 	CALL MUX_DISPLAYS_ARM
                                 	;IT WAITS ONE SEC
0001a9 3644                      	CPI COUNTER_T0, 100			; 100 * 10ms = 1000ms
0001aa f461                      	BRNE LOOPS7
0001ab 2744                      	CLR COUNTER_T0				;IT CLEARS COUNTER_T0
                                 
                                 	;IT UPLOADS VALUE OF SECONDS
0001ac 2766                      	CLR R22
0001ad 9160 0121                 	LDS R22, 0X0121		;LOAD TO R22 THE CONTENT FROM 0X0121, D1 SEC'S COUNTER
0001af 9563                      	INC R22				;COUNTER FOR SECONDS
0001b0 9360 0121                 	STS 0X0121, R22		;RELOAD COUNT TO 0X0121
0001b2 306a                      	CPI R22, 10			;COMPARE CONTENT OF 0X0121 TO 10 (10 SECS)
0001b3 f029                      	BREQ ZEROSP7			;IF IT'S BEEN 10 SECS GOES TO RESTART
0001b4 2766                      	CLR R22
0001b5 940c 006f                 	JMP LOOP
                                 
                                 LOOPS7:
0001b7 940c 006f                 	JMP LOOP
                                 ZEROSP7:
0001b9 940c 027d                 	JMP ZEROS
                                 
                                 
                                 
                                 ;******************************************************************************
                                 ;                                    STATE8
                                 ;******************************************************************************
                                 STATE8:
0001bb 940e 02f0                 	CALL MUX_DISPLAYS_ARM
                                 	;IT WAITS ONE SEC
0001bd 3644                      	CPI COUNTER_T0, 100			; 100 * 10ms = 1000ms
0001be f461                      	BRNE LOOPS8
0001bf 2744                      	CLR COUNTER_T0				;IT CLEARS COUNTER_T0
                                 	;IT UPLOADS VALUE OF SECONDS
0001c0 2766                      	CLR R22
0001c1 9160 0121                 	LDS R22, 0X0121		;LOAD TO R22 THE CONTENT FROM 0X0121, D1 SEC'S COUNTER
0001c3 9563                      	INC R22				;COUNTER FOR SECONDS
0001c4 9360 0121                 	STS 0X0121, R22		;RELOAD COUNT TO 0X0121
0001c6 306a                      	CPI R22, 10			;COMPARE CONTENT OF 0X0121 TO 10 (10 SECS)
0001c7 f029                      	BREQ ZEROSP8			;IF IT'S BEEN 10 SECS GOES TO RESTART
0001c8 2766                      	CLR R22
0001c9 940c 006f                 	JMP LOOP
                                 
                                 LOOPS8:
0001cb 940c 006f                 	JMP LOOP
                                 ZEROSP8:
0001cd 940c 027d                 	JMP ZEROS
                                 
                                 
                                 
                                 ;******************************************************************************
                                 ;                                    STATE9
                                 ;******************************************************************************
                                 STATE9:
0001cf 940e 02f0                 	CALL MUX_DISPLAYS_ARM
                                 	;IT WAITS ONE SEC
0001d1 3644                      	CPI COUNTER_T0, 100			; 100 * 10ms = 1000ms
0001d2 f461                      	BRNE LOOPS9
0001d3 2744                      	CLR COUNTER_T0				;IT CLEARS COUNTER_T0
                                 	;IT UPLOADS VALUE OF SECONDS
0001d4 2766                      	CLR R22
0001d5 9160 0121                 	LDS R22, 0X0121		;LOAD TO R22 THE CONTENT FROM 0X0121, D1 SEC'S COUNTER
0001d7 9563                      	INC R22				;COUNTER FOR SECONDS
0001d8 9360 0121                 	STS 0X0121, R22		;RELOAD COUNT TO 0X0121
0001da 306a                      	CPI R22, 10			;COMPARE CONTENT OF 0X0121 TO 10 (10 SECS)
0001db f029                      	BREQ ZEROSP9		;IF IT'S BEEN 10 SECS GOES TO RESTART
0001dc 2766                      	CLR R22
0001dd 940c 006f                 	JMP LOOP
                                 
                                 LOOPS9:
0001df 940c 006f                 	JMP LOOP
                                 ZEROSP9:
0001e1 940c 027d                 	JMP ZEROS
                                 
                                 ;******************************************************************************
                                 ;                                    STATE10
                                 ;******************************************************************************
                                 STATE10:
0001e3 e02b                      	LDI STATE, 11		;ASSIGN NEXT STATE
0001e4 9160 0141                 	LDS R22, 0X0141
0001e6 9100 0142                 	LDS R16, 0X0142
0001e8 2b60                      	OR R22, R16
0001e9 9100 0143                 	LDS R16, 0X0143
0001eb 2b60                      	OR R22, R16
0001ec 9100 0144                 	LDS R16, 0X0144
0001ee 2b60                      	OR R22, R16
0001ef 3060                      	CPI R22, 0
0001f0 f121                      	BREQ LOOPS10
                                 	
0001f1 9160 0143                 	LDS R22, 0X0143		;VALUE OF HOUR UNITS
0001f3 3064                      	CPI R22, 4
0001f4 f410                      	BRSH RESET_CH10		;IT CHECKS IF VALUE OF 0X0133 IS EQUAL OR MORE THAN 4
0001f5 940e 0204                 	CALL ASSIGN_TIME10
                                 
                                 RESET_CH10:
0001f7 9160 0144                 	LDS R22, 0X0144		;CHECK IF HOUR DOZ IS 2
0001f9 3062                      	CPI R22, 2
0001fa f011                      	BREQ RST_T10			; IF IT'S 2, IT GOES TO RST HOUR
0001fb 940e 0204                 	CALL ASSIGN_TIME10
                                 RST_T10:
0001fd 2766                      	CLR R22
0001fe 9360 0143                 	STS 0X0143, R22		;ASSIGN VALUE 0 FOR UNITS AN DOZ OF HOUR
000200 9360 0144                 	STS 0X0144, R22
000202 940e 0204                 	CALL ASSIGN_TIME10
                                 ASSIGN_TIME10:
                                 	/*LDS R22, 0X0131		;UPLOAD VALUE FOR MIN UNITS
                                 	STS 0X0123, R22
                                 	LDS R22, 0X0132		;UPLOAD VALUE FOR MIN DOZ
                                 	STS 0X0124, R22
                                 	LDS R22, 0X0133		;UPLOAD VALUE FOR HOUR UNITS
                                 	STS 0X0125, R22
                                 	LDS R22, 0X0134		;UPLOAD VALUE FOR HOUR DOZ
                                 	STS 0X0126, R22*/
000204 2766                      	CLR R22
000205 940e 02bf                 	CALL MUX_DISPLAYS
                                 	;IT WAITS ONE SEC
000207 3644                      	CPI COUNTER_T0, 100			; 100 * 10ms = 1000ms
000208 f461                      	BRNE LOOPS10
000209 2744                      	CLR COUNTER_T0				;IT CLEARS COUNTER_T0
                                 	;IT UPLOADS VALUE OF SECONDS
00020a 2766                      	CLR R22
00020b 9160 0121                 	LDS R22, 0X0121		;LOAD TO R22 THE CONTENT FROM 0X0121, D1 SEC'S COUNTER
00020d 9563                      	INC R22				;COUNTER FOR SECONDS
00020e 9360 0121                 	STS 0X0121, R22		;RELOAD COUNT TO 0X0121
000210 306a                      	CPI R22, 10			;COMPARE CONTENT OF 0X0121 TO 10 (10 SECS)
000211 f029                      	BREQ ZEROSP10		;IF IT'S BEEN 10 SECS GOES TO RESTART
000212 2766                      	CLR R22
000213 940c 006f                 	JMP LOOP
                                 LOOPS10:
000215 940c 006f                 	JMP LOOP
                                 ZEROSP10:
000217 940c 027d                 	JMP ZEROS
                                 
                                 ; ESTATE 11***********************************************************************************************
                                 
                                 STATE11:					;SHOW CLOCK
000219 2766                      	CLR R22
                                 
                                 	;DISPLAY1 MINUTES
00021a 940e 02e6                 	CALL CLEAN
00021c 9160 0123                 	LDS R22, 0X0123
00021e 940e 02eb                 	CALL DISPLAY
000220 e001                      	LDI R16, 0X01		;MUX
000221 b908                      	OUT PORTC, R16		;ONLY TRANSISTOR 3
000222 b96b                      	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 
                                 	;DISPLAY2 MINUTES
000223 940e 02e6                 	CALL CLEAN
000225 9160 0124                 	LDS R22, 0X0124
000227 940e 02eb                 	CALL DISPLAY
000229 e002                      	LDI R16, 0X02		;MUX
00022a b908                      	OUT PORTC, R16		;ONLY TRANSISTOR 4
00022b b96b                      	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 
                                 	;DISPLAY1 HOUR
00022c 940e 02e6                 	CALL CLEAN
00022e 9160 0125                 	LDS R22, 0X0125
000230 940e 02eb                 	CALL DISPLAY
000232 e004                      	LDI R16, 0X04		;MUX
000233 b908                      	OUT PORTC, R16		;ONLY TRANSISTOR 5
000234 b96b                      	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 
                                 	;DISPLAY2 HOUR
000235 940e 02e6                 	CALL CLEAN
000237 9160 0126                 	LDS R22, 0X0126
000239 940e 02eb                 	CALL DISPLAY
00023b 982d                      	CBI PORTB, PB5		;CLR PB5
00023c e008                      	LDI R16, 0X08		;MUX
00023d b908                      	OUT PORTC, R16		;ONLY TRANSISTOR 6
00023e b96b                      	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 	
                                 	;IT WAITS ONE SEC
00023f 3342                      	CPI COUNTER_T0, 50
000240 f1a9                      	BREQ D711
000241 3643                      	CPI COUNTER_T0, 99
000242 f199                      	BREQ D711
000243 3644                      	CPI COUNTER_T0, 100			; 100 * 10ms = 1000ms
000244 f5b9                      	BRNE LOOPS11
000245 2744                      	CLR COUNTER_T0				;IT CLEARS COUNTER_T0
000246 9a4f                      	SBI PIND, PD7
                                 	;IT UPLOADS VALUE OF SECONDS
000247 2766                      	CLR R22
000248 9160 0121                 	LDS R22, 0X0121		;LOAD TO R22 THE CONTENT FROM 0X0121, D1 SEC'S COUNTER
00024a 9563                      	INC R22				;COUNTER FOR SECONDS
00024b 9360 0121                 	STS 0X0121, R22		;RELOAD COUNT TO 0X0121
00024d 306a                      	CPI R22, 10			;COMPARE CONTENT OF 0X0121 TO 10 (10 SECS)
00024e f159                      	BREQ ZEROSP11			;IF IT'S BEEN 10 SECS GOES TO RESTART
                                 	
00024f 2766                      	CLR R22
000250 2700                      	CLR R16
000251 9160 0141                 	LDS R22, 0X0141
000253 9100 0123                 	LDS R16, 0X0123
000255 1360                      	CPSE R22, R16
000256 940c 006f                 	JMP LOOP
                                 
000258 2766                      	CLR R22
000259 2700                      	CLR R16
00025a 9160 0142                 	LDS R22, 0X0142
00025c 9100 0124                 	LDS R16, 0X0124
00025e 1360                      	CPSE R22, R16
00025f 940c 006f                 	JMP LOOP
                                 
000261 2766                      	CLR R22
000262 2700                      	CLR R16
000263 9160 0143                 	LDS R22, 0X0143
000265 9100 0125                 	LDS R16, 0X0125
000267 1360                      	CPSE R22, R16
000268 940c 006f                 	JMP LOOP
                                 
00026a 2766                      	CLR R22
00026b 2700                      	CLR R16
00026c 9160 0144                 	LDS R22, 0X0144
00026e 9100 0126                 	LDS R16, 0X0126
000270 1360                      	CPSE R22, R16
000271 940c 006f                 	JMP LOOP
000273 9a45                      	SBI PORTC, PC5
                                 
000274 940c 006f                 	JMP LOOP
                                 D711:
000276 9a4f                      	SBI PIND, PD7
000277 9a2c                      	SBI PORTB, PB4
000278 9a45                      	SBI PORTC, PC5
000279 cdf5                      	RJMP LOOP
                                 ZEROSP11:
00027a 940c 027d                 	JMP ZEROS
                                 LOOPS11:
00027c cdf2                      	RJMP LOOP
                                 
                                 
                                 ;******************************************************************************
                                 ;*************************        MUX FOR CLOCK          **********************
                                 ;******************************************************************************
                                 ZEROS:
00027d e060                      	LDI R22, 0			;LOAD CLR REG TO 0X0121, RESTART TO 0 SECS UNITS
00027e 9360 0121                 	STS 0X0121, R22
                                 
000280 9160 0122                 	LDS R22, 0X0122		;LOAD FROM 0X0122 TO R22
000282 9563                      	INC R22
000283 9360 0122                 	STS 0X0122, R22		;RELOAD NEW VALUE TO 0X0122
000285 3066                      	CPI R22, 6			;COMPARE IF COUNT IS 60 SECS
000286 f009                      	BREQ SIXS			;IF IT'S BEEN 1 MIN IT CLEARS SECS
000287 cde7                      	RJMP LOOP
                                 
                                 SIXS:
000288 e060                      	LDI R22, 0
000289 9360 0122                 	STS 0X0122, R22		;CLR SEC'S DOZENS
                                 
00028b 9160 0123                 	LDS R22, 0X0123		;LOAD FROM 0X0123, MIN'S UNITS
00028d 9563                      	INC R22
00028e 9360 0123                 	STS 0X0123, R22		;RELOAD VALUE FOR MIN'S UNITS
000290 306a                      	CPI R22, 10			;10 MINUTES
000291 f009                      	BREQ ZEROM
000292 cddc                      	RJMP LOOP
                                 
                                 ZEROM:
000293 e060                      	LDI R22, 0
000294 9360 0123                 	STS 0X0123, R22		;CLR MIN'S UNITS
                                 
000296 9160 0124                 	LDS R22, 0X0124		;LOAD FROM 0X0124, MIN'S DOZENS
000298 9563                      	INC R22
000299 9360 0124                 	STS 0X0124, R22		;RELOAD VALUE FOR DOZENS OF MINUTES
00029b 3066                      	CPI R22, 6			;60 MINS
00029c f009                      	BREQ SIXM
00029d cdd1                      	RJMP LOOP
                                 
                                 SIXM:
00029e e060                      	LDI R22, 0
00029f 9360 0124                 	STS 0X0124, R22		;CLR MIN'S DOZENS
                                 
0002a1 9160 0125                 	LDS R22, 0X0125		;LOAD HOUR'S UNITS
0002a3 9563                      	INC R22
0002a4 9360 0125                 	STS 0X0125, R22		;RELOAD HOUR'S UNITS
0002a6 306a                      	CPI R22, 10
0002a7 f019                      	BREQ ZEROH
0002a8 3064                      	CPI R22, 4
0002a9 f051                      	BREQ ENDTIME
0002aa cdc4                      	RJMP LOOP
                                 
                                 ZEROH:
0002ab e060                      	LDI R22, 0
0002ac 9360 0125                 	STS 0X0125, R22		;CLR HOUR'S UNITS
                                 
0002ae 9160 0126                 	LDS R22, 0X0126		;LOAD HOUR'S DOZ
0002b0 9563                      	INC R22
0002b1 9360 0126                 	STS 0X0126, R22		;RELOAD HOUR'S DOZ
0002b3 cdbb                      	RJMP LOOP
                                 
                                 ENDTIME:
0002b4 9160 0126                 	LDS R22, 0X0126		;LOAD HOUR'S DOZ
0002b6 ff61                      	SBRS R22, 1			;IF BIT 1 IS NOT SET (HOUR'S DOZ IS 2) IT JUMPS
0002b7 cdb7                      	RJMP LOOP			;EXCUTED IF BIT1 IS 0
                                 
0002b8 e060                      	LDI R22, 0
0002b9 9360 0125                 	STS 0X0125, R22		;CLR HOUR'S UNITS
                                 
0002bb e060                      	LDI R22, 0
0002bc 9360 0126                 	STS 0X0126, R22		;CLR HOUR'S DOZ
0002be cdb0                      	RJMP LOOP
                                 
                                 
                                 
                                 MUX_DISPLAYS:
0002bf 2766                      	CLR R22
                                 
                                 	;DISPLAY1 MINUTES
0002c0 940e 02e6                 	CALL CLEAN
                                 	;VALUE FOR DISPLAY
0002c2 9160 0131                 	LDS R22, 0X0131			;LOAD VALUE FROM 0X0122
0002c4 940e 02eb                 	CALL DISPLAY
0002c6 e001                      	LDI R16, 0X01		;MUX
0002c7 b908                      	OUT PORTC, R16		;ONLY TRANSISTOR 1
0002c8 b96b                      	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 
                                 	;DISPLAY2 MINUTES
0002c9 940e 02e6                 	CALL CLEAN
                                 	;VALUE FOR DISPLAY
0002cb 9160 0132                 	LDS R22, 0X0132		;CREATE A COPY FOR LOOKING UP INTO THE LIST
0002cd 940e 02eb                 	CALL DISPLAY
0002cf e002                      	LDI R16, 0X02		;MUX
0002d0 b908                      	OUT PORTC, R16		;ONLY TRANSISTOR 4
0002d1 b96b                      	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 
                                 	;DISPLAY1 HOUR
0002d2 940e 02e6                 	CALL CLEAN
                                 	;VALUE FOR DISPLAY
0002d4 9160 0133                 	LDS R22, 0X0133		;CREATE A COPY FOR LOOKING UP INTO THE LIST
0002d6 940e 02eb                 	CALL DISPLAY
0002d8 e004                      	LDI R16, 0X04		;MUX
0002d9 b908                      	OUT PORTC, R16		;ONLY TRANSISTOR 5
0002da b96b                      	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 
                                 	;DISPLAY2 HOUR
0002db 940e 02e6                 	CALL CLEAN
0002dd 9160 0134                 	LDS R22, 0X0134		;LOAD VALUE FROM 0X0122
0002df 940e 02eb                 	CALL DISPLAY
0002e1 e008                      	LDI R16, 0X08		;MUX
0002e2 b908                      	OUT PORTC, R16		;ONLY TRANSISTOR 6
0002e3 b96b                      	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 
                                 	;DISPLAY7 STATE
                                 	//CALL SHOW_STATE_SC
                                 
0002e4 9a4f                      	SBI PIND, PD7
0002e5 9508                      	RET
                                 
                                 
                                 CLEAN:
0002e6 2700                      	CLR R16
0002e7 b908                      	OUT PORTC, R16		;CLEAR TRANSISTORS
0002e8 b90b                      	OUT PORTD, R16		;CLEAR DISPLAY
0002e9 982d                      	CBI PORTB, PB5
0002ea 9508                      	RET
                                 
                                 DISPLAY:
0002eb e0f0                      	LDI ZH, HIGH(SEG << 1)
0002ec e4ec                      	LDI ZL, LOW(SEG << 1)
0002ed 0fe6                      	ADD ZL, R22
0002ee 9164                      	LPM R22, Z				;UPLOAD NEW VALUE FOR DISPLAY1 SECONDS
0002ef 9508                      	RET
                                 
                                 /*SHOW_STATE_SC:
                                 	CLR R16
                                 	CBI PORTB, PB5
                                 	OUT PORTC, R16		;CLEAR TRANSISTORS
                                 	OUT PORTD, R16		;CLEAR DISPLAY
                                 	SBI PORTB, PB5		;ACTIVATE PB5
                                 	LDI R16, 0X00		;MUX
                                 	OUT PORTC, R16		;ONLY TRANSISTOR 7
                                 	LDI R22, 0x6D		;IT SHOWS A S FOR "SET" CLOCK
                                 	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 	RET*/
                                 
                                 
                                 
                                 
                                 
                                 
                                 MUX_DISPLAYS_ARM:
0002f0 2766                      	CLR R22
                                 
                                 	;DISPLAY1 MINUTES
0002f1 940e 02e6                 	CALL CLEAN
                                 	;VALUE FOR DISPLAY
0002f3 9160 0141                 	LDS R22, 0X0141			;LOAD VALUE FROM 0X0122
0002f5 940e 02eb                 	CALL DISPLAY
0002f7 e001                      	LDI R16, 0X01		;MUX
0002f8 b908                      	OUT PORTC, R16		;ONLY TRANSISTOR 1
0002f9 b96b                      	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 
                                 	;DISPLAY2 MINUTES
0002fa 940e 02e6                 	CALL CLEAN
                                 	;VALUE FOR DISPLAY
0002fc 9160 0142                 	LDS R22, 0X0142		;CREATE A COPY FOR LOOKING UP INTO THE LIST
0002fe 940e 02eb                 	CALL DISPLAY
000300 e002                      	LDI R16, 0X02		;MUX
000301 b908                      	OUT PORTC, R16		;ONLY TRANSISTOR 4
000302 b96b                      	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 
                                 	;DISPLAY1 HOUR
000303 940e 02e6                 	CALL CLEAN
                                 	;VALUE FOR DISPLAY
000305 9160 0143                 	LDS R22, 0X0143		;CREATE A COPY FOR LOOKING UP INTO THE LIST
000307 940e 02eb                 	CALL DISPLAY
000309 e004                      	LDI R16, 0X04		;MUX
00030a b908                      	OUT PORTC, R16		;ONLY TRANSISTOR 5
00030b b96b                      	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 
                                 	;DISPLAY2 HOUR
00030c 940e 02e6                 	CALL CLEAN
00030e 9160 0144                 	LDS R22, 0X0144		;LOAD VALUE FROM 0X0122
000310 940e 02eb                 	CALL DISPLAY
000312 e008                      	LDI R16, 0X08		;MUX
000313 b908                      	OUT PORTC, R16		;ONLY TRANSISTOR 6
000314 b96b                      	OUT PORTD, R22		;SHOW VALUES FOR DISPLAY
                                 
                                 	;DISPLAY7 STATE
                                 	//CALL SHOW_STATE_SC
                                 
000315 984f                      	CBI PIND, PD7
000316 982c                      	CBI PORTB, PB4
000317 9a45                      	SBI PORTC, PC5
000318 9508                      	RET
                                 
                                 
                                 ;******************************************************************************
                                 ;*************************        INTERRUPTIONS          **********************
                                 ;******************************************************************************
                                 
                                 ;PCINT, INTERRUPTION FOR PORTB
                                 ISR_PCINT0:
000319 930f                      	PUSH R16
00031a b70f                      	IN R16, SREG
00031b 930f                      	PUSH R16
                                 	
                                 	;LOOING UP CURRENT STATE
00031c 3020                      	CPI STATE, 0
00031d f091                      	BREQ STATE0_ISR_P
00031e 3021                      	CPI STATE, 1
00031f f089                      	BREQ STATE1_ISR_P
000320 3022                      	CPI STATE, 2
000321 f081                      	BREQ STATE2_ISR_P
000322 3023                      	CPI STATE, 3
000323 f079                      	BREQ STATE3_ISR_P
000324 3024                      	CPI STATE, 4
000325 f071                      	BREQ STATE4_ISR_P
000326 3026                      	CPI STATE, 6
000327 f069                      	BREQ STATE6_ISR_P
000328 3027                      	CPI STATE, 7
000329 f061                      	BREQ STATE7_ISR_P
00032a 3028                      	CPI STATE, 8
00032b f059                      	BREQ STATE8_ISR_P
00032c 3029                      	CPI STATE, 9
00032d f051                      	BREQ STATE9_ISR_P
00032e 302b                      	CPI STATE, 11
00032f f049                      	BREQ STATE11_ISR_P
                                 
                                 
                                 	
                                 
                                 STATE0_ISR_P:
000330 c009                      	RJMP STATE0_ISR
                                 STATE1_ISR_P:
000331 c014                      	RJMP STATE1_ISR
                                 STATE2_ISR_P:
000332 c033                      	RJMP STATE2_ISR
                                 STATE3_ISR_P:
000333 c051                      	RJMP STATE3_ISR
                                 STATE4_ISR_P:
000334 c070                      	RJMP STATE4_ISR
                                 STATE6_ISR_P:
000335 c08e                      	RJMP STATE6_ISR
                                 STATE7_ISR_P:
000336 c0ad                      	RJMP STATE7_ISR
                                 STATE8_ISR_P:
000337 c0cb                      	RJMP STATE8_ISR
                                 STATE9_ISR_P:
000338 c0ea                      	RJMP STATE9_ISR
                                 STATE11_ISR_P:
000339 c108                      	RJMP STATE11_ISR
                                 
                                 
                                 
                                 
                                 ;******************************************************************************
                                 ;                              STATE INTERRUPTIONS
                                 ;******************************************************************************
                                 
                                 STATE0_ISR:
00033a b103                      	IN R16, PINB	;READ PORTB, ONLY INPUTS PB0-PB3
00033b ff01                      	SBRS R16, 1		;IF BUTTON 0 (COUNTER) WAS ACTIVATED IT DOES NOTHING (PB1)
00033c 0000                      	NOP
00033d ff00                      	SBRS R16, 0		;IF BUTTON 1 (COUNTER) WAS ACTIVATED IT DOES NOTHING (PB0)
00033e 0000                      	NOP
00033f ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED FIRST CLR COUNTER (CHANGE STATE)
000340 2733                      	CLR COUNTER
000341 ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED (CHANGE STATE)
000342 e021                      	LDI STATE, 1	;LOAD VALUE OF NEXT STATE
000343 ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED (CHANGE STATE)
000344 0000                      	NOP
                                 	//LDI STATE, ####	;LOAD VALUE OF PREVIOUS STATE
000345 c10a                      	RJMP ISR_POP
                                 
                                 
                                 
                                 STATE1_ISR:
000346 9330 0131                 	STS 0X0131, COUNTER
000348 3030                      	CPI COUNTER, 0	;FIRST, COMPARE IF ITS ZERO
000349 f061                      	BREQ INF_LIM
                                 
00034a b103                      	IN R16, PINB	;READ PORTB, ONLY INPUTS PB0-PB3
00034b ff01                      	SBRS R16, 1		;IF PB1 WAS ACTIVATED DEC COUNTER
00034c 953a                      	DEC COUNTER
00034d ff00                      	SBRS R16, 0		;IF PB0 WAS ACTIVADED INC COUNTER
00034e 9533                      	INC COUNTER
                                 
00034f 303a                      	CPI COUNTER, 10
000350 f011                      	BREQ SUP_LIM
000351 940c 035d                 	JMP END_ISR1
                                 
                                 SUP_LIM:
000353 e030                      	LDI COUNTER, 0	;RESTART VALUE FOR DISPLAY
000354 940c 035d                 	JMP END_ISR1
                                 INF_LIM:
000356 b103                      	IN R16, PINB	;READ PORTB, ONLY INPUTS PB0-PB3
000357 ff01                      	SBRS R16, 1		;IF PB1 WAS ACTIVATED SET 9 AS NEW VALUE
000358 e039                      	LDI COUNTER, 9
000359 ff00                      	SBRS R16, 0		;IF PB0 WAS ACTIVADED INC COUNTER
00035a 9533                      	INC COUNTER
00035b 940c 035d                 	JMP END_ISR1
                                 END_ISR1:
00035d ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED FIRST CLR COUTNER (CHANGE STATE)
00035e 2733                      	CLR COUNTER
00035f ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED (CHANGE STATE)
000360 e022                      	LDI STATE, 2	;LOAD VALUE OF NEXT STATE
000361 ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED FIRST CLR COUNER (CHANGE STATE)
000362 2733                      	CLR COUNTER
000363 ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED (CHANGE STATE)
000364 e020                      	LDI STATE, 0	;LOAD VALUE OF PREVIOUS STATE
000365 c0ea                      	RJMP ISR_POP
                                 
                                 
                                 STATE2_ISR:
000366 9330 0132                 	STS 0X0132, COUNTER
000368 b103                      	IN R16, PINB	;READ PORTB, ONLY INPUTS PB0-PB3
000369 3030                      	CPI COUNTER, 0	;FIRST, COMPARE IF COUNTER IS ZERO
00036a f059                      	BREQ INF_LIM_S2
                                 
00036b ff01                      	SBRS R16, 1		;IF PB1 WAS ACTIVATED DEC COUNTER
00036c 953a                      	DEC COUNTER
00036d ff00                      	SBRS R16, 0		;IF PB0 WAS ACTIVADED INC COUNTER
00036e 9533                      	INC COUNTER
                                 
00036f 3036                      	CPI COUNTER, 6
000370 f011                      	BREQ SUP_LIM_S2
000371 940c 037c                 	JMP END_ISR2
                                 
                                 SUP_LIM_S2:
000373 e030                      	LDI COUNTER, 0	;RESTART VALUE FOR DISPLAY
000374 940c 037c                 	JMP END_ISR2
                                 INF_LIM_S2:
000376 ff01                      	SBRS R16, 1		;IF PB1 WAS ACTIVATED SET 6 AS NEW VALUE
000377 e035                      	LDI COUNTER, 5
000378 ff00                      	SBRS R16, 0		;IF PB0 WAS ACTIVADED INC COUNTER
000379 9533                      	INC COUNTER
00037a 940c 037c                 	JMP END_ISR2
                                 END_ISR2:
00037c ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED FIRST CLR COUNTER (CHANGE STATE)
00037d 2733                      	CLR COUNTER
00037e ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED (CHANGE STATE)
00037f e023                      	LDI STATE, 3	;LOAD VALUE OF NEXT STATE
000380 ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED FIRST CLR COUNTER (CHANGE STATE)
000381 2733                      	CLR COUNTER
000382 ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED (CHANGE STATE)
000383 e021                      	LDI STATE, 1	;LOAD VALUE OF PREVIOUS STATE
000384 c0cb                      	RJMP ISR_POP
                                 
                                 
                                 
                                 STATE3_ISR:
000385 9330 0133                 	STS 0X0133, COUNTER
000387 3030                      	CPI COUNTER, 0	;FIRST, COMPARE IF ITS ZERO
000388 f061                      	BREQ INF_LIM3
                                 
000389 b103                      	IN R16, PINB	;READ PORTB, ONLY INPUTS PB0-PB3
00038a ff01                      	SBRS R16, 1		;IF PB1 WAS ACTIVATED DEC COUNTER
00038b 953a                      	DEC COUNTER
00038c ff00                      	SBRS R16, 0		;IF PB0 WAS ACTIVADED INC COUNTER
00038d 9533                      	INC COUNTER
                                 
00038e 303a                      	CPI COUNTER, 10
00038f f011                      	BREQ SUP_LIM3
000390 940c 039c                 	JMP END_ISR3
                                 
                                 SUP_LIM3:
000392 e030                      	LDI COUNTER, 0	;RESTART VALUE FOR DISPLAY
000393 940c 039c                 	JMP END_ISR3
                                 INF_LIM3:
000395 b103                      	IN R16, PINB	;READ PORTB, ONLY INPUTS PB0-PB3
000396 ff01                      	SBRS R16, 1		;IF PB1 WAS ACTIVATED SET 9 AS NEW VALUE
000397 e039                      	LDI COUNTER, 9
000398 ff00                      	SBRS R16, 0		;IF PB0 WAS ACTIVADED INC COUNTER
000399 9533                      	INC COUNTER
00039a 940c 039c                 	JMP END_ISR3
                                 END_ISR3:
00039c ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED FIRST CLR COUTNER (CHANGE STATE)
00039d 2733                      	CLR COUNTER
00039e ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED (CHANGE STATE)
00039f e024                      	LDI STATE, 4	;LOAD VALUE OF NEXT STATE
0003a0 ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED FIRST CLR COUNER (CHANGE STATE)
0003a1 2733                      	CLR COUNTER
0003a2 ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED (CHANGE STATE)
0003a3 e022                      	LDI STATE, 2	;LOAD VALUE OF PREVIOUS STATE
0003a4 c0ab                      	RJMP ISR_POP
                                 
                                 
                                 
                                 STATE4_ISR:
0003a5 9330 0134                 	STS 0X0134, COUNTER
0003a7 b103                      	IN R16, PINB	;READ PORTB, ONLY INPUTS PB0-PB3
0003a8 3030                      	CPI COUNTER, 0	;FIRST, COMPARE IF COUNTER IS ZERO
0003a9 f059                      	BREQ INF_LIM_S4
                                 
0003aa ff01                      	SBRS R16, 1		;IF PB1 WAS ACTIVATED DEC COUNTER
0003ab 953a                      	DEC COUNTER
0003ac ff00                      	SBRS R16, 0		;IF PB0 WAS ACTIVADED INC COUNTER
0003ad 9533                      	INC COUNTER
                                 
0003ae 3033                      	CPI COUNTER, 3
0003af f011                      	BREQ SUP_LIM_S4
0003b0 940c 03bb                 	JMP END_ISR4
                                 
                                 SUP_LIM_S4:
0003b2 e030                      	LDI COUNTER, 0	;RESTART VALUE FOR DISPLAY
0003b3 940c 03bb                 	JMP END_ISR4
                                 INF_LIM_S4:
0003b5 ff01                      	SBRS R16, 1		;IF PB1 WAS ACTIVATED SET 6 AS NEW VALUE
0003b6 e032                      	LDI COUNTER, 2
0003b7 ff00                      	SBRS R16, 0		;IF PB0 WAS ACTIVADED INC COUNTER
0003b8 9533                      	INC COUNTER
0003b9 940c 03bb                 	JMP END_ISR4
                                 END_ISR4:
0003bb ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED FIRST CLR COUNTER (CHANGE STATE)
0003bc 2733                      	CLR COUNTER
0003bd ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED (CHANGE STATE)
0003be e025                      	LDI STATE, 5	;LOAD VALUE OF NEXT STATE
0003bf ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED FIRST CLR COUNTER (CHANGE STATE)
0003c0 2733                      	CLR COUNTER
0003c1 ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED (CHANGE STATE)
0003c2 e023                      	LDI STATE, 3	;LOAD VALUE OF PREVIOUS STATE
0003c3 c08c                      	RJMP ISR_POP
                                 
                                 ;*****************************************************************************************************
                                 
                                 STATE6_ISR:
0003c4 9330 0141                 	STS 0X0141, COUNTER
0003c6 3030                      	CPI COUNTER, 0	;FIRST, COMPARE IF ITS ZERO
0003c7 f061                      	BREQ INF_LIM6
                                 
0003c8 b103                      	IN R16, PINB	;READ PORTB, ONLY INPUTS PB0-PB3
0003c9 ff01                      	SBRS R16, 1		;IF PB1 WAS ACTIVATED DEC COUNTER
0003ca 953a                      	DEC COUNTER
0003cb ff00                      	SBRS R16, 0		;IF PB0 WAS ACTIVADED INC COUNTER
0003cc 9533                      	INC COUNTER
                                 
0003cd 303a                      	CPI COUNTER, 10
0003ce f011                      	BREQ SUP_LIM6
0003cf 940c 03db                 	JMP END_ISR6
                                 
                                 SUP_LIM6:
0003d1 e030                      	LDI COUNTER, 0	;RESTART VALUE FOR DISPLAY
0003d2 940c 03db                 	JMP END_ISR6
                                 INF_LIM6:
0003d4 b103                      	IN R16, PINB	;READ PORTB, ONLY INPUTS PB0-PB3
0003d5 ff01                      	SBRS R16, 1		;IF PB1 WAS ACTIVATED SET 9 AS NEW VALUE
0003d6 e039                      	LDI COUNTER, 9
0003d7 ff00                      	SBRS R16, 0		;IF PB0 WAS ACTIVADED INC COUNTER
0003d8 9533                      	INC COUNTER
0003d9 940c 03db                 	JMP END_ISR6
                                 END_ISR6:
0003db ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED FIRST CLR COUTNER (CHANGE STATE)
0003dc 2733                      	CLR COUNTER
0003dd ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED (CHANGE STATE)
0003de e027                      	LDI STATE, 7	;LOAD VALUE OF NEXT STATE
0003df ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED FIRST CLR COUNER (CHANGE STATE)
0003e0 2733                      	CLR COUNTER
0003e1 ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED (CHANGE STATE)
0003e2 e024                      	LDI STATE, 4	;LOAD VALUE OF PREVIOUS STATE
0003e3 c06c                      	RJMP ISR_POP
                                 
                                 
                                 STATE7_ISR:
0003e4 9330 0142                 	STS 0X0142, COUNTER
0003e6 b103                      	IN R16, PINB	;READ PORTB, ONLY INPUTS PB0-PB3
0003e7 3030                      	CPI COUNTER, 0	;FIRST, COMPARE IF COUNTER IS ZERO
0003e8 f059                      	BREQ INF_LIM_7
                                 
0003e9 ff01                      	SBRS R16, 1		;IF PB1 WAS ACTIVATED DEC COUNTER
0003ea 953a                      	DEC COUNTER
0003eb ff00                      	SBRS R16, 0		;IF PB0 WAS ACTIVADED INC COUNTER
0003ec 9533                      	INC COUNTER
                                 
0003ed 3036                      	CPI COUNTER, 6
0003ee f011                      	BREQ SUP_LIM_7
0003ef 940c 03fa                 	JMP END_ISR7
                                 
                                 SUP_LIM_7:
0003f1 e030                      	LDI COUNTER, 0	;RESTART VALUE FOR DISPLAY
0003f2 940c 03fa                 	JMP END_ISR7
                                 INF_LIM_7:
0003f4 ff01                      	SBRS R16, 1		;IF PB1 WAS ACTIVATED SET 6 AS NEW VALUE
0003f5 e035                      	LDI COUNTER, 5
0003f6 ff00                      	SBRS R16, 0		;IF PB0 WAS ACTIVADED INC COUNTER
0003f7 9533                      	INC COUNTER
0003f8 940c 03fa                 	JMP END_ISR7
                                 END_ISR7:
0003fa ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED FIRST CLR COUNTER (CHANGE STATE)
0003fb 2733                      	CLR COUNTER
0003fc ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED (CHANGE STATE)
0003fd e028                      	LDI STATE, 8	;LOAD VALUE OF NEXT STATE
0003fe ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED FIRST CLR COUNTER (CHANGE STATE)
0003ff 2733                      	CLR COUNTER
000400 ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED (CHANGE STATE)
000401 e026                      	LDI STATE, 6	;LOAD VALUE OF PREVIOUS STATE
000402 c04d                      	RJMP ISR_POP
                                 
                                 
                                 
                                 STATE8_ISR:
000403 9330 0143                 	STS 0X0143, COUNTER
000405 3030                      	CPI COUNTER, 0	;FIRST, COMPARE IF ITS ZERO
000406 f061                      	BREQ INF_LIM8
                                 
000407 b103                      	IN R16, PINB	;READ PORTB, ONLY INPUTS PB0-PB3
000408 ff01                      	SBRS R16, 1		;IF PB1 WAS ACTIVATED DEC COUNTER
000409 953a                      	DEC COUNTER
00040a ff00                      	SBRS R16, 0		;IF PB0 WAS ACTIVADED INC COUNTER
00040b 9533                      	INC COUNTER
                                 
00040c 303a                      	CPI COUNTER, 10
00040d f011                      	BREQ SUP_LIM8
00040e 940c 041a                 	JMP END_ISR8
                                 
                                 SUP_LIM8:
000410 e030                      	LDI COUNTER, 0	;RESTART VALUE FOR DISPLAY
000411 940c 041a                 	JMP END_ISR8
                                 INF_LIM8:
000413 b103                      	IN R16, PINB	;READ PORTB, ONLY INPUTS PB0-PB3
000414 ff01                      	SBRS R16, 1		;IF PB1 WAS ACTIVATED SET 9 AS NEW VALUE
000415 e039                      	LDI COUNTER, 9
000416 ff00                      	SBRS R16, 0		;IF PB0 WAS ACTIVADED INC COUNTER
000417 9533                      	INC COUNTER
000418 940c 041a                 	JMP END_ISR8
                                 END_ISR8:
00041a ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED FIRST CLR COUTNER (CHANGE STATE)
00041b 2733                      	CLR COUNTER
00041c ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED (CHANGE STATE)
00041d e029                      	LDI STATE, 9	;LOAD VALUE OF NEXT STATE
00041e ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED FIRST CLR COUNER (CHANGE STATE)
00041f 2733                      	CLR COUNTER
000420 ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED (CHANGE STATE)
000421 e027                      	LDI STATE, 7	;LOAD VALUE OF PREVIOUS STATE
000422 c02d                      	RJMP ISR_POP
                                 
                                 
                                 
                                 STATE9_ISR:
000423 9330 0144                 	STS 0X0144, COUNTER
000425 b103                      	IN R16, PINB	;READ PORTB, ONLY INPUTS PB0-PB3
000426 3030                      	CPI COUNTER, 0	;FIRST, COMPARE IF COUNTER IS ZERO
000427 f059                      	BREQ INF_LIM_9
                                 
000428 ff01                      	SBRS R16, 1		;IF PB1 WAS ACTIVATED DEC COUNTER
000429 953a                      	DEC COUNTER
00042a ff00                      	SBRS R16, 0		;IF PB0 WAS ACTIVADED INC COUNTER
00042b 9533                      	INC COUNTER
                                 
00042c 3033                      	CPI COUNTER, 3
00042d f011                      	BREQ SUP_LIM_9
00042e 940c 0439                 	JMP END_ISR9
                                 
                                 SUP_LIM_9:
000430 e030                      	LDI COUNTER, 0	;RESTART VALUE FOR DISPLAY
000431 940c 0439                 	JMP END_ISR9
                                 INF_LIM_9:
000433 ff01                      	SBRS R16, 1		;IF PB1 WAS ACTIVATED SET 6 AS NEW VALUE
000434 e032                      	LDI COUNTER, 2
000435 ff00                      	SBRS R16, 0		;IF PB0 WAS ACTIVADED INC COUNTER
000436 9533                      	INC COUNTER
000437 940c 0439                 	JMP END_ISR9
                                 END_ISR9:
000439 ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED FIRST CLR COUNTER (CHANGE STATE)
00043a 2733                      	CLR COUNTER
00043b ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED (CHANGE STATE)
00043c e02a                      	LDI STATE, 10	;LOAD VALUE OF NEXT STATE
00043d ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED FIRST CLR COUNTER (CHANGE STATE)
00043e 2733                      	CLR COUNTER
00043f ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED (CHANGE STATE)
000440 e028                      	LDI STATE, 8	;LOAD VALUE OF PREVIOUS STATE
000441 c00e                      	RJMP ISR_POP
                                 
                                 
                                 
                                 STATE11_ISR:
000442 b103                      	IN R16, PINB	;READ PORTB, ONLY INPUTS PB0-PB3
000443 ff01                      	SBRS R16, 1		;IF BUTTON 0 (COUNTER) WAS ACTIVATED IT DOES NOTHING (PB1)
000444 0000                      	NOP
000445 ff00                      	SBRS R16, 0		;IF BUTTON 1 (COUNTER) WAS ACTIVATED IT DOES NOTHING (PB0)
000446 0000                      	NOP
000447 ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED FIRST CLR COUNTER (CHANGE STATE)
000448 2733                      	CLR COUNTER
000449 ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED (CHANGE STATE)
00044a e020                      	LDI STATE, 0	;LOAD VALUE OF NEXT STATE
00044b ff02                      	SBRS R16, 2		;IF B2 (PB2) WAS ACTIVATED (CHANGE STATE)
00044c 982c                      	CBI PORTB, PB4	;LOAD VALUE OF NEXT STATE
00044d ff03                      	SBRS R16, 3		;IF B3 (PB3) WAS ACTIVATED (CHANGE STATE)
00044e e029                      	LDI STATE, 9
00044f c000                      	RJMP ISR_POP
                                 
                                 
                                 
                                 ISR_POP:
000450 9ad8                      	SBI PCIFR, PCIF0
000451 910f                      	POP R16
000452 bf0f                      	OUT SREG, R16
000453 910f                      	POP R16
000454 9518                      	RETI
                                 
                                 ;TIMER0 INTERRUPTION
                                  INIT_T0:
000455 e005                      	LDI R16, (1 << CS02) | (1 << CS00)
000456 bd05                      	OUT TCCR0B, R16			;SET PRESCALER, 1024
000457 e603                      	LDI R16, 99				;OVERFLOW VALUE, EVERY 10ms
000458 bd06                      	OUT TCNT0, R16			;LOAD START VALUE OF TIMER
000459 e001                      	LDI R16, (1 << TOIE0)
00045a 9300 006e                 	STS TIMSK0, R16			;INTERRUPTION ENABLE
00045c 9508                      	RET
                                 
                                 ISR_TIMER0:
00045d e603                      	LDI R16, 99				;VALUE OF TIMER OVERFLOW
00045e bd06                      	OUT TCNT0, R16			;LOAD THE OVERFLOW VALUE
00045f 9aa8                      	SBI TIFR0, TOV0			;TURN OFF FLAG
000460 9543                      	INC COUNTER_T0			;INCREASE COUNTER OF 10ms
000461 9518                      	RETI
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   2 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 220 r17:   2 r18:  44 r19:  83 r20:  30 
r21:   3 r22: 191 r23:   0 r24:   0 r25:   0 r26:   0 r27:   0 r28:   0 
r29:   0 r30:   4 r31:   2 
Registers used: 10 out of 35 (28.6%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   2 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  63 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  12 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  49 cbi   :   8 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  81 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  77 cpse  :   4 dec   :   8 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  15 inc   :  34 jmp   :  77 
ld    :   0 ldd   :   0 ldi   :  84 lds   :  58 lpm   :   4 lsl   :   0 
lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   5 or    :   6 ori   :   0 out   :  45 pop   :   2 
push  :   2 rcall :   0 ret   :   5 reti  :   2 rjmp  :  31 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  12 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :  76 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  71 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 28 out of 113 (24.8%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008c4   2178     10   2188   32768   6.7%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
